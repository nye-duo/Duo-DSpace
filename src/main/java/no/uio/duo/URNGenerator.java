package no.uio.duo;import no.nb.idservice.client.ws.v1_0.FailedLoginException_Exception;import no.nb.idservice.client.ws.v1_0.IdService;import no.nb.idservice.client.ws.v1_0.IdService_Service;import no.nb.idservice.client.ws.v1_0.IllegalActionException_Exception;import no.nb.idservice.client.ws.v1_0.InsufficientRightsException_Exception;import no.nb.idservice.client.ws.v1_0.InvalidURLException_Exception;import no.nb.idservice.client.ws.v1_0.MalformedURLException_Exception;import no.nb.idservice.client.ws.v1_0.MalformedURNException_Exception;import no.nb.idservice.client.ws.v1_0.ObjectAlreadyExistsException_Exception;import no.nb.idservice.client.ws.v1_0.ServerError_Exception;import no.nb.idservice.client.ws.v1_0.URNInfo;import no.nb.idservice.client.ws.v1_0.URNNotFoundException_Exception;import no.nb.idservice.client.ws.v1_0.URNSeriesNotFoundException_Exception;import org.apache.commons.cli.CommandLine;import org.apache.commons.cli.CommandLineParser;import org.apache.commons.cli.Options;import org.apache.commons.cli.ParseException;import org.apache.commons.cli.PosixParser;import org.dspace.authorize.AuthorizeException;import org.dspace.content.Bitstream;import org.dspace.content.Bundle;import org.dspace.content.DCValue;import org.dspace.content.Item;import org.dspace.content.ItemIterator;import org.dspace.core.ConfigurationManager;import org.dspace.core.Context;import javax.xml.namespace.QName;import java.io.UnsupportedEncodingException;import java.net.MalformedURLException;import java.net.URL;import java.net.URLEncoder;import java.sql.SQLException;/** * <p>Command line script to enhance the metadata of an item with a URN retrieved from the * National Library and the urls of all the bitstreams associated with an item</p> * * <p><strong>Execution</strong></p> * * <p>The script can be run with the dsrun command of the dspace script.  If run without * arguments it will add URNs and bitstream urls to every time which does not have a URN already. * If run with the -f argument, it will add URNs to every item which does not have one, and also * regenerate ALL bitstream urls</p> * * <pre> *     [dspace]/bin/dspace dsrun no.uio.duo.URNGenerator [-f] * </pre> */public class URNGenerator{    private QName serviceName = null;    private IdService_Service client = null;    private IdService service = null;    private String sessionToken = null;    private String series = null;    private String baseUrl = null;    /**     * Runs this script.  -f argument is optional     *     * @param args     * @throws ClassNotFoundException     * @throws SQLException     * @throws MalformedURLException     * @throws MalformedURNException_Exception     * @throws URNNotFoundException_Exception     * @throws FailedLoginException_Exception     * @throws IllegalActionException_Exception     * @throws InsufficientRightsException_Exception     * @throws InvalidURLException_Exception     * @throws MalformedURLException_Exception     * @throws ObjectAlreadyExistsException_Exception     * @throws ServerError_Exception     * @throws URNSeriesNotFoundException_Exception     * @throws ParseException     */    public static void main(String[] args)            throws ClassNotFoundException, SQLException, MalformedURLException,            MalformedURNException_Exception, URNNotFoundException_Exception, FailedLoginException_Exception,            IllegalActionException_Exception, InsufficientRightsException_Exception, InvalidURLException_Exception,            MalformedURLException_Exception, ObjectAlreadyExistsException_Exception, ServerError_Exception,            URNSeriesNotFoundException_Exception, ParseException    {        CommandLineParser parser = new PosixParser();        Options options = new Options();        options.addOption("f", "fulltext", false, "should the fulltext links be updated.  In cases where the URN does not already exist, this will be done automatically");        CommandLine line = parser.parse(options, args);        boolean ft = line.hasOption("f");        // brute force load the DSpace config        ConfigurationManager.loadConfig(null);        URNGenerator urng = new URNGenerator();        Context context = new Context();        try        {            urng.addMetadata(context, ft);        }        catch (Exception e)        {            if (context.isValid())            {                context.abort();            }        }        finally        {            if (context.isValid())            {                context.complete();            }        }    }    /**     * Constructor, which does all the necessary bootstrapping to connect to the     * URN service, including authentication.     *     * @throws MalformedURLException     * @throws FailedLoginException_Exception     */    public URNGenerator()            throws MalformedURLException, FailedLoginException_Exception    {        String idServiceUrl = ConfigurationManager.getProperty("urn", "idservice.url");        String username = ConfigurationManager.getProperty("urn", "idservice.username");        String password = ConfigurationManager.getProperty("urn", "idservice.password");        if (idServiceUrl == null || "".equals(idServiceUrl))        {            throw new MalformedURLException("No URL provided in configuration");        }        URL serviceURL = new URL(idServiceUrl);        serviceName = new QName("http://nb.no/idservice/v1.0/", "IdService");        client = new IdService_Service(serviceURL, serviceName);        service = client.getIdServiceSOAP11Port();        sessionToken = service.login(username, password);        series = ConfigurationManager.getProperty("urn", "idservice.series");        baseUrl = ConfigurationManager.getProperty("urn", "item.base_url");    }    /**     * Request a URN to represent the provided URL.     *     * This method performs a web service request to the National Library API     *     * @param url     * @return     * @throws MalformedURNException_Exception     * @throws URNNotFoundException_Exception     * @throws FailedLoginException_Exception     * @throws IllegalActionException_Exception     * @throws InsufficientRightsException_Exception     * @throws InvalidURLException_Exception     * @throws MalformedURLException_Exception     * @throws ObjectAlreadyExistsException_Exception     * @throws ServerError_Exception     * @throws URNSeriesNotFoundException_Exception     * @throws Exception     */    private String getURN(String url)            throws MalformedURNException_Exception, URNNotFoundException_Exception, FailedLoginException_Exception,            IllegalActionException_Exception, InsufficientRightsException_Exception, InvalidURLException_Exception,            MalformedURLException_Exception, ObjectAlreadyExistsException_Exception, ServerError_Exception,            URNSeriesNotFoundException_Exception, Exception    {        try        {            System.out.println("requesting urn with session " + sessionToken + " for series " + series);            URNInfo info = service.createURN(sessionToken, "", url);            String urn = info.getURN();            System.out.println(url);            return urn;        }        catch (Exception e)        {            e.printStackTrace();            throw e;        }    }    /**     * Add the URN and the fulltext urls to all of the relevant items in the repository     *     * @param context   The DSpace Context object     * @param doFulltext    Whether to force the regeneration of bitstream urls or not     *     * @throws SQLException     * @throws MalformedURNException_Exception     * @throws URNNotFoundException_Exception     * @throws FailedLoginException_Exception     * @throws IllegalActionException_Exception     * @throws InsufficientRightsException_Exception     * @throws InvalidURLException_Exception     * @throws MalformedURLException_Exception     * @throws ObjectAlreadyExistsException_Exception     * @throws ServerError_Exception     * @throws URNSeriesNotFoundException_Exception     * @throws AuthorizeException     * @throws Exception     */    public void addMetadata(Context context, boolean doFulltext)            throws SQLException, MalformedURNException_Exception, URNNotFoundException_Exception,            FailedLoginException_Exception, IllegalActionException_Exception, InsufficientRightsException_Exception,            InvalidURLException_Exception, MalformedURLException_Exception, ObjectAlreadyExistsException_Exception,            ServerError_Exception, URNSeriesNotFoundException_Exception, AuthorizeException, Exception    {        String urnField = ConfigurationManager.getProperty("urn", "urn.field");        String fulltextField = ConfigurationManager.getProperty("urn", "fulltext.field");        System.out.println(urnField);        System.out.println(fulltextField);        ItemIterator ii = Item.findAll(context);        while (ii.hasNext())        {            Item item = ii.next();            boolean update = false;            // only do the root urn if a configuration option is specified            if (urnField != null && !"".equals(urnField))            {                // determine whether the item already has a URN field                DCValue[] urns = item.getMetadata(urnField);                if (urns.length == 0)                {                    String handle = item.getHandle();                    String url = baseUrl + handle;                    System.out.println("Obtaining URN for item with handle " + handle + " for url " + url);                    // we need to provide the item with a URN                    DCValue dcv = this.getDCValue(urnField);                    String urn = this.getURN(url);                    System.out.println("for item " + handle + ": urn=" + urn);                    item.addMetadata(dcv.schema, dcv.element, dcv.qualifier, null, urn);                    // this means that we always do the fulltext and we need to update the item                    doFulltext = true;                    update = true;                }            }            // only do the fulltext urls if a configuration option is specified, and the doFulltext flag is set            if (fulltextField != null && !"".equals(fulltextField) && doFulltext)            {                DCValue dcv = this.getDCValue(fulltextField);                // clear any pre-existing metadata in these fields                item.clearMetadata(dcv.schema, dcv.element, dcv.qualifier, Item.ANY);                String prefix = ConfigurationManager.getProperty("urn", "fulltext.prefix");                if (prefix != null && !"".equals(prefix))                {                    if (!prefix.endsWith(" "))                    {                        prefix += " ";                    }                }                else                {                    prefix = "";                }                // for each ORIGINAL bundle, do each bitstream                Bundle[] originals = item.getBundles("ORIGINAL");                for (Bundle original : originals)                {                    Bitstream[] bitstreams = original.getBitstreams();                    for (Bitstream bitstream : bitstreams)                    {                        String url = this.getBitstreamUrl(item, bitstream);                        System.out.println("for item " + item.getHandle() + ": adding " + url);                        item.addMetadata(dcv.schema, dcv.element, dcv.qualifier, null, prefix + url);                        // this means we need to update the item                        update = true;                    }                }            }            if (update)            {                item.update();            }        }    }    /**     * Turn a configuration string into a DCValue object     *     * @param mdString  configuration string in the form [schema].[element].[qualifier]     * @return     */    private DCValue getDCValue(String mdString)    {        String bits[] = mdString.split("\\.");        DCValue dcv = new DCValue();        dcv.schema = bits[0];        dcv.element = bits[1];        if (bits.length == 3)        {            dcv.qualifier = bits[2];        }        return dcv;    }    /**     * Generate the bitstream url for the bitstream in the context of the supplied item     *     * @param item  The item the bitstream is part of     * @param bitstream The bitstream whose url to construct     * @return     */    private String getBitstreamUrl(Item item, Bitstream bitstream)    {        String base = ConfigurationManager.getProperty("urn", "bitstream.base_url");        String handle = item.getHandle();        int seq = bitstream.getSequenceID();        String name = bitstream.getName();        String urlName = null;        try        {            urlName = URLEncoder.encode(name, "UTF-8");        }        catch (UnsupportedEncodingException e)        {            // take a chance            urlName = name;        }        String url = base + handle + "/" + Integer.toString(seq) + "/" + urlName;        return url;    }}